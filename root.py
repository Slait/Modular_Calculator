import tkinter as tk
from tkinter import ttk, messagebox
import math
import sympy
import re
import os
import sys
import time
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã
import importlib
from lang.ru import *

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.json')

class ModularRootCalculator:
    def __init__(self, root):
        self.root = root
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config = self.load_config()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.config.get('language') == 'English':
            importlib.reload(sys.modules['lang.ru'])
            lang_module = importlib.import_module('lang.en')
            for var_name in dir(lang_module):
                if var_name.isupper():
                    globals()[var_name] = getattr(lang_module, var_name)
        
        self.root.title(ROOT_TITLE)
        self.root.geometry("540x300")
        self.root.resizable(True, True)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        ttk.Label(main_frame, text=LANGUAGE_LABEL).grid(row=0, column=0, sticky=tk.W, pady=5)
        self.language_var = tk.StringVar(value=self.config.get('language', '–†—É—Å—Å–∫–∏–π'))
        language_combo = ttk.Combobox(main_frame, textvariable=self.language_var, state="readonly", width=15)
        language_combo['values'] = ("–†—É—Å—Å–∫–∏–π", "English")
        language_combo.grid(row=0, column=1, sticky=tk.W, pady=5)
        language_combo.bind("<<ComboboxSelected>>", self.change_language)
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        ttk.Label(main_frame, text=ROOT_POWER_LABEL).grid(row=1, column=0, sticky=tk.W, pady=5)
        self.root_power_var = tk.StringVar()
        self.root_power_entry = tk.Entry(main_frame, textvariable=self.root_power_var, width=50, bg="#e0ffe0")
        self.root_power_entry.grid(row=1, column=1, columnspan=2, sticky=tk.W+tk.E, pady=5)
        self.root_power_entry.bind("<Return>", lambda event: self.calculate())
        ttk.Button(main_frame, text="üìã", width=3, command=lambda: self.copy_to_clipboard(self.root_power_var.get())).grid(row=1, column=3, padx=2)
        
        ttk.Label(main_frame, text=NUMBER_LABEL).grid(row=2, column=0, sticky=tk.W, pady=5)
        self.number_var = tk.StringVar()
        self.number_entry = tk.Entry(main_frame, textvariable=self.number_var, width=50, bg="#e0ffe0")
        self.number_entry.grid(row=2, column=1, columnspan=2, sticky=tk.W+tk.E, pady=5)
        self.number_entry.bind("<Return>", lambda event: self.calculate())
        ttk.Button(main_frame, text="üìã", width=3, command=lambda: self.copy_to_clipboard(self.number_var.get())).grid(row=2, column=3, padx=2)
        
        ttk.Label(main_frame, text=MODULE_LABEL).grid(row=3, column=0, sticky=tk.W, pady=5)
        self.module_var = tk.StringVar(value=DEFAULT_MODULE)
        self.module_entry = tk.Entry(main_frame, textvariable=self.module_var, width=50, bg="#e0ffe0")
        self.module_entry.grid(row=3, column=1, columnspan=2, sticky=tk.W+tk.E, pady=5)
        self.module_entry.bind("<Return>", lambda event: self.calculate())
        ttk.Button(main_frame, text="üìã", width=3, command=lambda: self.copy_to_clipboard(self.module_var.get())).grid(row=3, column=3, padx=2)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=2, pady=10, sticky=tk.W)
        
        ttk.Button(button_frame, text=TEST_BUTTON, command=self.set_test_module).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text=BTC_BUTTON, command=self.set_btc_module).pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å (–æ—Ç–¥–µ–ª—å–Ω–æ –∏ –∫—Ä—É–ø–Ω–µ–µ)
        calculate_button = tk.Button(main_frame, text=CALCULATE_BUTTON, command=self.calculate, 
                                    bg="#e0ffe0", font=("Arial", 12, "bold"), padx=20, pady=10)
        calculate_button.grid(row=4, column=2, columnspan=2, pady=10, sticky=tk.E)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_frame = ttk.LabelFrame(main_frame, text=RESULTS_TITLE)
        result_frame.grid(row=5, column=0, columnspan=4, sticky=tk.W+tk.E, pady=10)
        
        ttk.Label(result_frame, text=ROOT_RESULT_LABEL).grid(row=0, column=0, sticky=tk.W, pady=5)
        self.result_var = tk.StringVar()
        self.result_entry = ttk.Entry(result_frame, textvariable=self.result_var, state="readonly", width=50)
        self.result_entry.grid(row=0, column=1, sticky=tk.W+tk.E, pady=5)
        ttk.Button(result_frame, text="üìã", width=3, command=lambda: self.copy_to_clipboard(self.result_var.get())).grid(row=0, column=2, padx=2)
        
        ttk.Label(result_frame, text=SYMMETRIC_LABEL).grid(row=1, column=0, sticky=tk.W, pady=5)
        self.symmetric_var = tk.StringVar()
        ttk.Entry(result_frame, textvariable=self.symmetric_var, state="readonly", width=50).grid(row=1, column=1, sticky=tk.W+tk.E, pady=5)
        ttk.Button(result_frame, text="üìã", width=3, command=lambda: self.copy_to_clipboard(self.symmetric_var.get())).grid(row=1, column=2, padx=2)
    
    def change_language(self, event):
        """–ò–∑–º–µ–Ω—è–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        selected_language = self.language_var.get()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥—É–ª—å
        if selected_language == "English":
            lang_module = importlib.import_module("lang.en")
        else:  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
            lang_module = importlib.import_module("lang.ru")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∞
        for var_name in dir(lang_module):
            if var_name.isupper():  # –¢–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                globals()[var_name] = getattr(lang_module, var_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.root.title(ROOT_TITLE)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for widget in self.root.winfo_children():
            self._update_widget_text(widget)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config['language'] = selected_language
        self.save_config()
        
        messagebox.showinfo(ROOT_TITLE, f"{LANGUAGE_SELECTED}: {selected_language}")
    
    def _update_widget_text(self, widget):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        if hasattr(widget, 'winfo_children'):
            for child in widget.winfo_children():
                self._update_widget_text(child)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ—Ç–æ–∫
        if isinstance(widget, ttk.Label) or isinstance(widget, tk.Label):
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if widget.grid_info() and 'row' in widget.grid_info():
                row = widget.grid_info()['row']
                column = widget.grid_info()['column']
                
                # –ú–µ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ—Ä–µ–π–º–µ
                if row == 0 and column == 0:  # –ú–µ—Ç–∫–∞ —è–∑—ã–∫–∞
                    widget.config(text=LANGUAGE_LABEL)
                elif row == 1 and column == 0:  # –ú–µ—Ç–∫–∞ –∫–æ—Ä–Ω—è
                    widget.config(text=ROOT_POWER_LABEL)
                elif row == 2 and column == 0:  # –ú–µ—Ç–∫–∞ —á–∏—Å–ª–∞
                    widget.config(text=NUMBER_LABEL)
                elif row == 3 and column == 0:  # –ú–µ—Ç–∫–∞ –º–æ–¥—É–ª—è
                    widget.config(text=MODULE_LABEL)
            
            # –ú–µ—Ç–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º —Ñ—Ä–µ–π–º–µ
            if widget.master and isinstance(widget.master, ttk.LabelFrame) and widget.master.grid_info() and widget.master.grid_info().get('row') == 5:
                if widget.grid_info() and 'row' in widget.grid_info():
                    if widget.grid_info()['row'] == 0 and widget.grid_info()['column'] == 0:
                        widget.config(text=ROOT_RESULT_LABEL)
                    elif widget.grid_info()['row'] == 1 and widget.grid_info()['column'] == 0:
                        widget.config(text=SYMMETRIC_LABEL)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        if isinstance(widget, ttk.Button) or isinstance(widget, tk.Button):
            if widget.cget('text') == "–¢–µ—Å—Ç–æ–≤—ã–π 79" or widget.cget('text') == "Testing 79":
                widget.config(text=TEST_BUTTON)
            elif widget.cget('text') == "BTC":
                widget.config(text=BTC_BUTTON)
            elif widget.cget('text') == "–í—ã—á–∏—Å–ª–∏—Ç—å" or widget.cget('text') == "Calculate":
                widget.config(text=CALCULATE_BUTTON)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ñ—Ä–µ–π–º–æ–≤
        if isinstance(widget, ttk.LabelFrame):
            if widget.grid_info() and widget.grid_info().get('row') == 5:
                widget.config(text=RESULTS_TITLE)
    
    def set_test_module(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å 79"""
        self.module_var.set("79")
    
    def set_btc_module(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å BTC"""
        self.module_var.set("115792089237316195423570985008687907852837564279074904382605163141518161494337")
    
    def is_prime(self, n):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º"""
        try:
            return sympy.isprime(n)
        except:
            return False
    
    def tonelli_shanks(self, n, p):
        """–ê–ª–≥–æ—Ä–∏—Ç–º –¢–æ–Ω–µ–ª–ª–∏-–®–µ–Ω–∫—Å–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –ø–æ –º–æ–¥—É–ª—é –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ p - –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
        if not self.is_prime(p):
            return []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ n - –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –≤—ã—á–µ—Ç –ø–æ –º–æ–¥—É–ª—é p
        if pow(n, (p - 1) // 2, p) != 1:
            return []
        
        # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: p = 2
        if p == 2:
            return [n % 2]
        
        # –ù–∞—Ö–æ–¥–∏–º Q –∏ S —Ç–∞–∫–∏–µ, —á—Ç–æ p - 1 = Q * 2^S
        Q, S = p - 1, 0
        while Q % 2 == 0:
            Q //= 2
            S += 1
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –Ω–µ–≤—ã—á–µ—Ç z
        z = 2
        while pow(z, (p - 1) // 2, p) == 1:
            z += 1
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        M = S
        c = pow(z, Q, p)
        t = pow(n, Q, p)
        R = pow(n, (Q + 1) // 2, p)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        while True:
            if t == 0:
                return [0]
            if t == 1:
                return [R, p - R]
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω—å—à–µ–µ i —Ç–∞–∫–æ–µ, —á—Ç–æ t^(2^i) = 1 (mod p)
            i = 0
            temp = t
            while temp != 1 and i < M:
                temp = (temp * temp) % p
                i += 1
            
            if i == M:
                return []
            
            # –í—ã—á–∏—Å–ª—è–µ–º b = c^(2^(M-i-1)) mod p
            b = pow(c, 2 ** (M - i - 1), p)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            M = i
            c = (b * b) % p
            t = (t * c) % p
            R = (R * b) % p
    
    def find_nth_roots(self, n, a, m):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ n-–µ –∫–æ—Ä–Ω–∏ —á–∏—Å–ª–∞ a –ø–æ –º–æ–¥—É–ª—é m"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ n –∏ m –≤–∑–∞–∏–º–Ω–æ –ø—Ä–æ—Å—Ç—ã
        if math.gcd(n, m) != 1:
            # –î–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ n –∏ m –Ω–µ –≤–∑–∞–∏–º–Ω–æ –ø—Ä–æ—Å—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return self.find_roots_general(n, a, m)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ–µ –∫ n –ø–æ –º–æ–¥—É–ª—é phi(m)
        if self.is_prime(m):
            phi_m = m - 1
        else:
            # –î–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∏—Å–µ–ª –≤—ã—á–∏—Å–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≠–π–ª–µ—Ä–∞
            phi_m = sympy.totient(m)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ n –∏ phi(m) –≤–∑–∞–∏–º–Ω–æ –ø—Ä–æ—Å—Ç—ã
        if math.gcd(n, phi_m) != 1:
            return self.find_roots_general(n, a, m)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ–µ –∫ n –ø–æ –º–æ–¥—É–ª—é phi(m)
        n_inv = pow(n, -1, phi_m)
        
        # –í—ã—á–∏—Å–ª—è–µ–º x = a^(n_inv) mod m
        x = pow(a, n_inv, m)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ x^n = a (mod m)
        if pow(x, n, m) == a % m:
            return [x]
        else:
            return []
    
    def find_roots_general(self, n, a, m):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è n-—Ö –∫–æ—Ä–Ω–µ–π –ø–æ –º–æ–¥—É–ª—é m"""
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø–µ—Ä–µ–±–æ—Ä–æ–º –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –º–æ–¥—É–ª–µ–π
        # –î–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥—É–ª–µ–π –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        if m > 10**6:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥—É–ª–µ–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∏—Ç–∞–π—Å–∫–æ–π —Ç–µ–æ—Ä–µ–º—ã –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥—É–ª–µ–π
            return self.find_roots_crt(n, a, m)
        
        roots = []
        a = a % m
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ m-1
        for x in range(m):
            if pow(x, n, m) == a:
                roots.append(x)
        
        return roots
    
    def find_roots_crt(self, n, a, m):
        """–ú–µ—Ç–æ–¥ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∏—Ç–∞–π—Å–∫–æ–π —Ç–µ–æ—Ä–µ–º—ã –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        # –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        factors = sympy.factorint(m)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ—Å—Ç–æ–º—É –º–æ–¥—É–ª—é
        all_roots = []
        for prime, power in factors.items():
            prime_power = prime ** power
            prime_roots = self.find_roots_prime_power(n, a % prime_power, prime, power)
            all_roots.append((prime_power, prime_roots))
        
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –º–æ–¥—É–ª—é –Ω–µ—Ç –∫–æ—Ä–Ω–µ–π, —Ç–æ –∏ –ø–æ –≤—Å–µ–º—É –º–æ–¥—É–ª—é –Ω–µ—Ç –∫–æ—Ä–Ω–µ–π
        if any(not roots for _, roots in all_roots):
            return []
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∏—Ç–∞–π—Å–∫—É—é —Ç–µ–æ—Ä–µ–º—É –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        result = []
        for combination in self.cartesian_product([roots for _, roots in all_roots]):
            # –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –∫–∏—Ç–∞–π—Å–∫–æ–π —Ç–µ–æ—Ä–µ–º—ã –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
            moduli = [mod for mod, _ in all_roots]
            remainders = combination
            root = self.chinese_remainder_theorem(moduli, remainders)
            if root is not None:
                result.append(root)
        
        return result
    
    def find_roots_prime_power(self, n, a, p, k):
        """–ù–∞—Ö–æ–¥–∏—Ç n-–µ –∫–æ—Ä–Ω–∏ –ø–æ –º–æ–¥—É–ª—é p^k, –≥–¥–µ p - –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ"""
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–∏ –ø–æ –º–æ–¥—É–ª—é p
        roots_mod_p = []
        
        # –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –¢–æ–Ω–µ–ª–ª–∏-–®–µ–Ω–∫—Å–∞
        if n == 2:
            roots_mod_p = self.tonelli_shanks(a % p, p)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–Ω–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π –ø–æ–¥—Ö–æ–¥
            g = math.gcd(n, p - 1)
            if pow(a, (p - 1) // g, p) != 1:
                return []
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ—Ä–Ω–∏ –ø–æ –º–æ–¥—É–ª—é p
            for i in range(g):
                # –ù–∞—Ö–æ–¥–∏–º –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å
                n_inv = pow(n // g, -1, (p - 1) // g)
                x = pow(a, n_inv, p)
                
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –∫–æ—Ä–µ–Ω—å –ø–æ –º–æ–¥—É–ª—é p
                primitive_root = 2
                while pow(primitive_root, (p - 1) // g, p) == 1:
                    primitive_root += 1
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ—Ä–Ω–∏
                omega = pow(primitive_root, (p - 1) // g, p)
                root = (x * pow(omega, i, p)) % p
                roots_mod_p.append(root)
        
        # –ï—Å–ª–∏ k = 1, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–Ω–∏ –ø–æ –º–æ–¥—É–ª—é p
        if k == 1:
            return roots_mod_p
        
        # –ü–æ–¥–Ω–∏–º–∞–µ–º –∫–æ—Ä–Ω–∏ –¥–æ –º–æ–¥—É–ª—è p^k —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –•–µ–Ω–∑–µ–ª—è
        roots_mod_pk = []
        for r in roots_mod_p:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–º–º—É –•–µ–Ω–∑–µ–ª—è –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –∫–æ—Ä–Ω—è
            root = r
            for i in range(1, k):
                p_i = p ** i
                f_prime = (n * pow(root, n - 1, p_i)) % p_i
                if f_prime == 0:  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ä–∞–≤–Ω–∞ 0, –∫–æ—Ä–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–Ω—è—Ç
                    continue
                
                f_prime_inv = pow(f_prime, -1, p_i)
                correction = ((a - pow(root, n, p_i * p)) * f_prime_inv) % (p_i * p)
                root = (root + correction * p_i) % (p_i * p)
            
            roots_mod_pk.append(root)
        
        return roots_mod_pk
    
    def cartesian_product(self, lists):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤"""
        if not lists:
            return [()]
        result = []
        for item in lists[0]:
            for rest in self.cartesian_product(lists[1:]):
                result.append((item,) + rest)
        return result
    
    def chinese_remainder_theorem(self, moduli, remainders):
        """–†–µ—à–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –∫–∏—Ç–∞–π—Å–∫–æ–π —Ç–µ–æ—Ä–µ–º—ã –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        if len(moduli) != len(remainders):
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        M = 1
        for modulus in moduli:
            M *= modulus
        
        result = 0
        for modulus, remainder in zip(moduli, remainders):
            m_i = M // modulus
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ–µ –∫ m_i –ø–æ –º–æ–¥—É–ª—é modulus
            try:
                m_i_inv = pow(m_i, -1, modulus)
            except:
                return None
            
            result = (result + remainder * m_i * m_i_inv) % M
        
        return result
    
    def copy_to_clipboard(self, text):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        self.root.clipboard_clear()
        self.root.clipboard_append(text)
        self.root.update()
    
    def calculate(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Ä–Ω–∏ –ø–æ –º–æ–¥—É–ª—é"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            self.result_var.set(CALCULATING)
            self.root.update_idletasks()
            
            root_power = self.root_power_var.get().strip()
            number = self.number_var.get().strip()
            mod_str = self.module_var.get().strip()
            
            if not root_power or not number:
                raise ValueError(ERROR_INVALID_EXPRESSION)
            
            try:
                n = int(root_power)
                a = int(number)
                mod = int(mod_str)
                if n <= 0 or mod <= 0:
                    raise ValueError
            except:
                raise ValueError(ERROR_INVALID_MODULE)
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            start_time = time.time()
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ—Ä–Ω–∏
            roots = self.find_nth_roots(n, a, mod)
            
            # –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            end_time = time.time()
            print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.6f} —Å–µ–∫—É–Ω–¥")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not roots:
                self.result_var.set(NO_ROOTS)
                self.symmetric_var.set("")
            else:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                roots.sort()
                self.result_var.set(", ".join(str(root) for root in roots))
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                symmetric_roots = [(mod - root) % mod for root in roots]
                symmetric_roots.sort()
                self.symmetric_var.set(", ".join(str(root) for root in symmetric_roots))
            
        except Exception as e:
            messagebox.showerror(ROOT_TITLE, str(e))

    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(CONFIG_FILE):
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {'language': '–†—É—Å—Å–∫–∏–π'}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {'language': '–†—É—Å—Å–∫–∏–π'}
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = ModularRootCalculator(root)
    root.mainloop()