import tkinter as tk
from tkinter import ttk, messagebox
import math
import sympy
import re
import os
import sys
import time
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã
import importlib
from lang.ru import *

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.json')

class ModularCalculator:
    def __init__(self, root):
        self.root = root
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config = self.load_config()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.config.get('language') == 'English':
            importlib.reload(sys.modules['lang.ru'])
            lang_module = importlib.import_module('lang.en')
            for var_name in dir(lang_module):
                if var_name.isupper():
                    globals()[var_name] = getattr(lang_module, var_name)
        
        self.root.title(TITLE)
        self.root.geometry("540x450")
        self.root.resizable(True, True)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        ttk.Label(main_frame, text=LANGUAGE_LABEL).grid(row=0, column=0, sticky=tk.W, pady=5)
        self.language_var = tk.StringVar(value=self.config.get('language', '–†—É—Å—Å–∫–∏–π'))
        language_combo = ttk.Combobox(main_frame, textvariable=self.language_var, state="readonly", width=15)
        language_combo['values'] = ("–†—É—Å—Å–∫–∏–π", "English")
        language_combo.grid(row=0, column=1, sticky=tk.W, pady=5)
        language_combo.bind("<<ComboboxSelected>>", self.change_language)
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        ttk.Label(main_frame, text=EXPRESSION_LABEL).grid(row=1, column=0, sticky=tk.W, pady=5)
        self.expression_var = tk.StringVar()
        self.expression_entry = tk.Entry(main_frame, textvariable=self.expression_var, width=50, bg="#e0ffe0")
        self.expression_entry.grid(row=1, column=1, columnspan=2, sticky=tk.W+tk.E, pady=5)
        self.expression_entry.bind("<Return>", lambda event: self.calculate())
        ttk.Button(main_frame, text="üìã", width=3, command=lambda: self.copy_to_clipboard(self.expression_var.get())).grid(row=1, column=3, padx=2)
        
        ttk.Label(main_frame, text=MODULE_LABEL).grid(row=2, column=0, sticky=tk.W, pady=5)
        self.module_var = tk.StringVar(value=DEFAULT_MODULE)
        module_entry = ttk.Entry(main_frame, textvariable=self.module_var, width=50)
        module_entry.grid(row=2, column=1, columnspan=2, sticky=tk.W+tk.E, pady=5)
        ttk.Button(main_frame, text="üìã", width=3, command=lambda: self.copy_to_clipboard(self.module_var.get())).grid(row=2, column=3, padx=2)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=10, sticky=tk.W)
        
        ttk.Button(button_frame, text=TEST_BUTTON, command=self.set_test_module).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text=BTC_BUTTON, command=self.set_btc_module).pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å (–æ—Ç–¥–µ–ª—å–Ω–æ –∏ –∫—Ä—É–ø–Ω–µ–µ)
        calculate_button = tk.Button(main_frame, text=CALCULATE_BUTTON, command=self.calculate, 
                                    bg="#e0ffe0", font=("Arial", 12, "bold"), padx=20, pady=10)
        calculate_button.grid(row=3, column=2, columnspan=2, pady=10, sticky=tk.E)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_frame = ttk.LabelFrame(main_frame, text="")
        result_frame.grid(row=4, column=0, columnspan=4, sticky=tk.W+tk.E, pady=10)
        
        ttk.Label(result_frame, text=RESULT_LABEL).grid(row=0, column=0, sticky=tk.W, pady=5)
        self.result_var = tk.StringVar()
        result_entry = ttk.Entry(result_frame, textvariable=self.result_var, state="readonly", width=50)
        result_entry.grid(row=0, column=1, sticky=tk.W+tk.E, pady=5)
        ttk.Button(result_frame, text="üìã", width=3, command=lambda: self.copy_to_clipboard(self.result_var.get())).grid(row=0, column=2, padx=2)
        
        ttk.Label(result_frame, text=SYMMETRIC_LABEL).grid(row=1, column=0, sticky=tk.W, pady=5)
        self.symmetric_var = tk.StringVar()
        symmetric_entry = ttk.Entry(result_frame, textvariable=self.symmetric_var, state="readonly", width=50)
        symmetric_entry.grid(row=1, column=1, sticky=tk.W+tk.E, pady=5)
        ttk.Button(result_frame, text="üìã", width=3, command=lambda: self.copy_to_clipboard(self.symmetric_var.get())).grid(row=1, column=2, padx=2)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        hint_frame = ttk.LabelFrame(main_frame, text=OPERATIONS_HINT_TITLE)
        hint_frame.grid(row=5, column=0, columnspan=4, sticky=tk.W+tk.E, pady=10)
        
        ttk.Label(hint_frame, text=OPERATIONS_HINT).grid(row=0, column=0, sticky=tk.W, pady=5)
    
    def change_language(self, event):
        """–ò–∑–º–µ–Ω—è–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        selected_language = self.language_var.get()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥—É–ª—å
        if selected_language == "English":
            lang_module = importlib.import_module("lang.en")
        else:  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
            lang_module = importlib.import_module("lang.ru")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∞
        for var_name in dir(lang_module):
            if var_name.isupper():  # –¢–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                globals()[var_name] = getattr(lang_module, var_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.root.title(TITLE)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for widget in self.root.winfo_children():
            self._update_widget_text(widget)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config['language'] = selected_language
        self.save_config()
        
        messagebox.showinfo(TITLE, f"{LANGUAGE_SELECTED}: {selected_language}")
    
    def _update_widget_text(self, widget):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        if hasattr(widget, 'winfo_children'):
            for child in widget.winfo_children():
                self._update_widget_text(child)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ—Ç–æ–∫
        if isinstance(widget, ttk.Label) or isinstance(widget, tk.Label):
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if widget.grid_info() and 'row' in widget.grid_info():
                row = widget.grid_info()['row']
                column = widget.grid_info()['column']
                
                # –ú–µ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ—Ä–µ–π–º–µ
                if row == 0 and column == 0:  # –ú–µ—Ç–∫–∞ —è–∑—ã–∫–∞
                    widget.config(text=LANGUAGE_LABEL)
                elif row == 1 and column == 0:  # –ú–µ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                    widget.config(text=EXPRESSION_LABEL)
                elif row == 2 and column == 0:  # –ú–µ—Ç–∫–∞ –º–æ–¥—É–ª—è
                    widget.config(text=MODULE_LABEL)
            
            # –ú–µ—Ç–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º —Ñ—Ä–µ–π–º–µ
            if widget.master and isinstance(widget.master, ttk.LabelFrame) and widget.master.grid_info() and widget.master.grid_info().get('row') == 4:
                if widget.grid_info() and 'row' in widget.grid_info():
                    if widget.grid_info()['row'] == 0 and widget.grid_info()['column'] == 0:
                        widget.config(text=RESULT_LABEL)
                    elif widget.grid_info()['row'] == 1 and widget.grid_info()['column'] == 0:
                        widget.config(text=SYMMETRIC_LABEL)
            
            # –ú–µ—Ç–∫–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–π
            if widget.master and isinstance(widget.master, ttk.LabelFrame) and widget.master.grid_info() and widget.master.grid_info().get('row') == 5:
                widget.config(text=OPERATIONS_HINT)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        if isinstance(widget, ttk.Button) or isinstance(widget, tk.Button):
            if widget.cget('text') == "–¢–µ—Å—Ç–æ–≤—ã–π 79" or widget.cget('text') == "Testing 79":
                widget.config(text=TEST_BUTTON)
            elif widget.cget('text') == "BTC":
                widget.config(text=BTC_BUTTON)
            elif widget.cget('text') == "–í—ã—á–∏—Å–ª–∏—Ç—å" or widget.cget('text') == "Calculate":
                widget.config(text=CALCULATE_BUTTON)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ñ—Ä–µ–π–º–æ–≤
        if isinstance(widget, ttk.LabelFrame):
            if widget.grid_info() and widget.grid_info().get('row') == 5:
                widget.config(text=OPERATIONS_HINT_TITLE)
    
    def set_test_module(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å 79"""
        self.module_var.set("79")
    
    def set_btc_module(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å BTC"""
        self.module_var.set("115792089237316195423570985008687907852837564279074904382605163141518161494337")
    
    def is_prime(self, n):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º"""
        try:
            return sympy.isprime(n)
        except:
            return False
    
    def mod_inverse(self, a, m):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–µ –ø–æ –º–æ–¥—É–ª—é"""
        try:
            return pow(a, -1, m)
        except:
            raise ValueError(ERROR_DIVISION_NON_PRIME)
    
    def fast_power_mod(self, base, exponent, modulus):
        """–ë—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å –ø–æ –º–æ–¥—É–ª—é"""
        if modulus == 1:
            return 0
        
        result = 1
        base = base % modulus
        
        while exponent > 0:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–∏—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–≤–µ–Ω 1, —É–º–Ω–æ–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –±–∞–∑—É
            if exponent % 2 == 1:
                result = (result * base) % modulus
            
            # –°–¥–≤–∏–≥–∞–µ–º –Ω–∞ –æ–¥–∏–Ω –±–∏—Ç –≤–ø—Ä–∞–≤–æ
            exponent = exponent >> 1
            base = (base * base) % modulus
            
        return result
    
    def evaluate_expression(self, expr, mod):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—é"""
        # –ó–∞–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        # –ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–¥–∞ a^b
        power_pattern = r'(\d+)\^(\d+)'
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å—Ç–µ–ø–µ–Ω–∏ –Ω–∞ –≤—ã–∑–æ–≤ –Ω–∞—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        while re.search(power_pattern, expr):
            match = re.search(power_pattern, expr)
            if match:
                base = int(match.group(1))
                exp = int(match.group(2))
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å
                power_result = self.fast_power_mod(base, exp, mod)
                # –ó–∞–º–µ–Ω—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                expr = expr.replace(f"{base}^{exp}", str(power_result))
            else:
                break
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Python –æ–ø–µ—Ä–∞—Ç–æ—Ä
        expr = expr.replace("^", "**")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–µ–Ω–∏—è
        if "/" in expr and not self.is_prime(mod):
            raise ValueError(ERROR_DIVISION_NON_PRIME)
        
        # –ó–∞–º–µ–Ω—è–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–µ –ø–æ –º–æ–¥—É–ª—é
        while "/" in expr:
            match = re.search(r'(\d+)/(\d+)', expr)
            if match:
                num, denom = int(match.group(1)), int(match.group(2))
                inv = self.mod_inverse(denom, mod)
                expr = expr.replace(f"{num}/{denom}", f"{num}*{inv}")
            else:
                break
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π eval —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        allowed_names = {"__builtins__": {}}
        code = compile(expr, "<string>", "eval")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        for name in code.co_names:
            if name not in allowed_names:
                raise ValueError(ERROR_INVALID_EXPRESSION)
        
        result = eval(expr, {"__builtins__": {}}, {})
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –º–æ–¥—É–ª—é
        return result % mod
    
    def calculate(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ –º–æ–¥—É–ª—é"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            self.result_var.set(CALCULATING)
            self.root.update_idletasks()
            
            expr = self.expression_var.get().strip()
            mod_str = self.module_var.get().strip()
            
            if not expr:
                raise ValueError(ERROR_INVALID_EXPRESSION)
            
            try:
                mod = int(mod_str)
                if mod <= 0:
                    raise ValueError
            except:
                raise ValueError(ERROR_INVALID_MODULE)
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            start_time = time.time()
            
            result = self.evaluate_expression(expr, mod)
            
            # –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            end_time = time.time()
            print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.6f} —Å–µ–∫—É–Ω–¥")
            
            self.result_var.set(str(result))
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            symmetric = (mod - result) % mod
            self.symmetric_var.set(str(symmetric))
            
        except Exception as e:
            messagebox.showerror(TITLE, str(e))

    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(CONFIG_FILE):
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {'language': '–†—É—Å—Å–∫–∏–π'}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {'language': '–†—É—Å—Å–∫–∏–π'}
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def copy_to_clipboard(self, text):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        self.root.clipboard_clear()
        self.root.clipboard_append(text)
        self.root.update()

if __name__ == "__main__":
    root = tk.Tk()
    app = ModularCalculator(root)
    root.mainloop()